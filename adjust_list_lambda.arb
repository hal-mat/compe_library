ADJUST_LIST_LAMBDA = lambda do |min_nodes_count = 0, need_pred = true|
  buffer_answer = Array.new(min_nodes_count)
  EDGES.each do |node_a, node_b|
    node_a -= 1 if need_pred
    node_b -= 1 if need_pred
    buffer_answer[node_a] ||= []
    buffer_answer[node_a] << node_b
    buffer_answer[node_b] ||= []
    buffer_answer[node_b] << node_a
  end
  buffer_answer
end

SELF_AND_DESCENDANTS_COUNT_LAMBDA = lambda do |root|
  answer = []
  recursive = lambda do |tmp_node, parent_node = nil|
    recursive_answer = 1 + ADJ_LIST[tmp_node].sum do |adjust_node|
      (adjust_node == parent_node) ? 0 : recursive.call(adjust_node, tmp_node)
    end
    answer[tmp_node] = recursive_answer
  end
  recursive.call(root)
  answer
end

# ref:https://atcoder.jp/contests/abc291/submissions/39282338
module AdjustList
  def adjust_list(min_nodes_count = 0)
    buffer_answer = Array.new(min_nodes_count)
    # buffer_answer = {}
    each do |node_a, node_b|
      node_a -= 1
      node_b -= 1
      # setの<<はともかく|はイメージよりも遅いので注意
      buffer_answer[node_a] ||= []
      # buffer_answer[node_a] ||= [].to_set
      buffer_answer[node_a] << node_b
      buffer_answer[node_b] ||= []
      # buffer_answer[node_b] ||= [].to_set
      buffer_answer[node_b] << node_a
    end
    # buffer_answer
    buffer_answer.extend Tree
  end

  def single_adjust_list(min_nodes_count = 0)
    buffer_answer = Array.new(min_nodes_count)
    each do |node_a, node_b|
      node_a -= 1
      node_b -= 1
      buffer_answer[node_a] ||= [].to_set
      buffer_answer[node_a] << node_b
    end
    buffer_answer
  end

  # トポロジカルソートに使う。ref:https://atcoder.jp/contests/abc291/submissions/39401286
  def reverse_adjust_list(min_nodes_count = 0)
    buffer_answer = Array.new(min_nodes_count)
    each do |node_a, node_b|
      node_a -= 1
      node_b -= 1
      buffer_answer[node_b] ||= [].to_set
      buffer_answer[node_b] << node_a
    end
    buffer_answer
  end

  # ufと違い片方向のみの場合のtree_size。2000*2000くらいなら通る。自分も含むので注意
  # ref:https://atcoder.jp/contests/abc292/submissions/39754461
  module CanVisitNodesCountFrom
    def can_visit_nodes_count_from(root = 0)
      stack = [root]
      visited = [].to_set
      while (tmp_node = stack.pop)
        next if visited.include?(tmp_node)

        visited << tmp_node
        stack.concat self[tmp_node].to_a if self[tmp_node]
      end
      visited.size
    end
  end

  # warshall_floydで通らなさそうな2000*2000ではこちらを使う。
  # AdjustListでsetを使っている場合は通らないので配列に直す
  # ref:https://atcoder.jp/contests/abc299/submissions/40885238
  module BfsAdjustMatrix
    def bfs_adjust_matrix(nodes_count)
      answer = []
      nodes_count.times do |start_node|
        answer << bfs_from(start_node)
      end
      answer
    end

    def bfs_from(start_node)
      answer = bfs_first_answer(start_node)
      queue = [start_node]
      while (tmp_node = queue.shift) && (tmp_step = answer[tmp_node])
        (self[tmp_node] || []).each do |adj_node|
          next if answer[adj_node]

          answer[adj_node] = tmp_step + 1
          queue << adj_node
        end
      end
      answer
    end

    def bfs_first_answer(start_node)
      answer = []
      answer[start_node] = 0
      answer
    end
    private :bfs_from, :bfs_first_answer
  end

  # 木構造。いつか「各ノードの深さ」の配列も作る
  module Tree
    attr_reader :leaves, :depth_pyramid, :depth_of

    def init_tree(nodes_count, root = 0)
      @root = root
      @root.freeze
      init_instance_variable!(nodes_count, root)
      add_depth_pyramid_row! while @depth_pyramid[-1]
      @depth_pyramid.map! { |v| v&.any? ? v : nil }.compact!
      @leaves = @children_of.map.with_index { |v, i| v.any? ? nil : i }.compact
      cache_ancestor!
      @has_initialized = true
    end

    def self_and_descendants_count
      answer = []
      recursive = lambda do |tmp_node, parent_node = nil|
        recursive_answer = 1 + ADJ_LIST[tmp_node].sum do |adjust_node|
          (adjust_node == parent_node) ? 0 : recursive.call(adjust_node, tmp_node)
        end
        answer[tmp_node] = recursive_answer
      end
      # answer[@call] = 1 + recursive.call(@root)
      recursive.call(@root)
      answer
    end

    def init_instance_variable!(nodes_count, root)
      @ancestors_of = Array.new(nodes_count) { [] }
      @ancestors_of[root] = []
      @children_of = Array.new(nodes_count) { [] }
      @depth_pyramid = [[root]]
      @depth_of = []
      @depth_of[root] = 0
    end

    def refresh_instance_variable!(tmp_node)
      self[tmp_node].to_a.each do |adj_node|
        next if @depth_of[adj_node]

        @ancestors_of[adj_node] = [tmp_node]
        @children_of[tmp_node] << adj_node
        @depth_of[adj_node] = @depth_pyramid.size
      end
    end

    def add_depth_pyramid_row!
      @depth_pyramid << @depth_pyramid[-1].map do |tmp_node|
        refresh_instance_variable!(tmp_node)
        @children_of[tmp_node]
      end.flatten!&.compact
    end

    def cache_ancestor!
      can_climb_nodes = (0..@ancestors_of.size - 1).to_set
      tmp_ancestors_size = 1
      while can_climb_nodes.any?
        can_climb_nodes.each do |climb_from|
          new_top_ancestor = new_top_ancestor_of(climb_from, tmp_ancestors_size)
          new_top_ancestor ? @ancestors_of[climb_from] << new_top_ancestor : can_climb_nodes.delete(climb_from)
        end
        tmp_ancestors_size += 1
      end
    end

    def new_top_ancestor_of(climb_from, tmp_ancestors_size)
      old_top_ancestor = @ancestors_of[climb_from][tmp_ancestors_size - 1]
      old_top_ancestor && @ancestors_of[old_top_ancestor][tmp_ancestors_size - 1]
    end

    def ancestor_where(climb_from, target_depth)
      raise StandardError if @depth_of[climb_from] < target_depth

      tmp_node = climb_from
      until (tmp_depth_diff = @depth_of[tmp_node] - target_depth) == 0
        tmp_node = @ancestors_of[tmp_node][tmp_depth_diff.bit_length - 1]
      end
      tmp_node
    end

    # https://qiita.com/ryo-ma/items/24c46592b45775e8644d
    def lca(deep_node, shallow_node)
      return deep_node if deep_node == shallow_node

      deep_node, shallow_node = shallow_node, deep_node if @depth_of[deep_node] < @depth_of[shallow_node]
      climbed_deep_node = ancestor_where(deep_node, @depth_of[shallow_node])
      recursive_climb_until_lca(climbed_deep_node, shallow_node)
    end

    def recursive_climb_until_lca(node_a, node_b)
      return node_a if node_a == node_b
      return @ancestors_of[node_a][0] if @ancestors_of[node_a][0] == @ancestors_of[node_b][0]

      climb_bit_length = climb_bit_length_not_common(node_a, node_b)
      recursive_climb_until_lca(@ancestors_of[node_a][climb_bit_length],
                                @ancestors_of[node_b][climb_bit_length])
    end

    def climb_bit_length_not_common(node_a, node_b)
      climb_bit_length_i = 1
      until @ancestors_of[node_a][climb_bit_length_i + 1] == @ancestors_of[node_b][climb_bit_length_i + 1]
        climb_bit_length_i += 1
      end
      climb_bit_length_i
    end

    private :init_instance_variable!, :new_top_ancestor_of, :cache_ancestor!, :recursive_climb_until_lca,
            :add_depth_pyramid_row!, :refresh_instance_variable!, :climb_bit_length_not_common, :ancestor_where,
            :climb_bit_length_not_common
  end
end

CENTROIDS = lambda do
  answer = []
  ADJ_LIST.subtree_sizes.each_with_index do |subtree_size, i|
    next if subtree_size > (NODES_COUNT >> 1) || subtree_size < (NODES_COUNT >> 1)

    answer << i
    break if answer.size == 2
  end
  answer
end

EDGES.extend AdjustList
ADJ_LIST = EDGES.adjust_list
p ADJ_LIST if debug
