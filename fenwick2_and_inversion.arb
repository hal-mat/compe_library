# 変更した際は以下の問題で転倒数がバグってないか確認！
# https://atcoder.jp/contests/abc264/tasks/abc264_d
module MyFenwickTree
  # ref:https://github.com/universato/ac-library-rb/blob/main/lib/fenwick_tree.rb
  # fenwick木は1-indexedなので先頭は使わない。fenwick木の長さでも入れておくこと。
  # https://algo-logic.info/binary-indexed-tree/
  # https://qiita.com/DaikiSuyama/items/7295f5160a51684554a7

  def add(index, value = 1)
    raise StandardError if index < 1

    tmp_index = index
    self_fenwick_size_cache = self_fenwick_size
    while tmp_index <= self_fenwick_size_cache
      self[tmp_index] = value + self[tmp_index].to_i
      # 最下位の1を繰り上げる
      tmp_index += (tmp_index & -tmp_index)
    end
  end

  # lower_boundと似たような計算。いつか一本化する
  def find_mex
    buffer_answer = 0
    tmp_right = min_expo_over(self_fenwick_size)

    while (tmp_right >>= 1) > 0
      if buffer_answer + tmp_right < self_fenwick_size && self[buffer_answer + tmp_right] == tmp_right
        buffer_answer += tmp_right
      end
    end

    buffer_answer
  end

  def all_sum
    left_sum(size - 1)
  end

  # 1-indexedでl以上r以下
  def sum_between(left, right)
    left_sum(right) - left_sum(left - 1)
  end

  # 1-indexedでindex以下
  def left_sum(index)
    raise StandardError if index < 0

    res = 0
    tmp_index = index
    while tmp_index > 0
      res += self[tmp_index].to_i
      # 最下位の1を払う
      tmp_index &= tmp_index - 1
    end
    res
  end

  def self_fenwick_size
    self[0]
  end

  # left_sum(a) >= under_borderとなるような最小のa
  # https://algo-logic.info/binary-indexed-tree/#toc_id_1_2
  def lower_bound(under_border)
    return -1 if under_border <= 0

    buffer_under_border = under_border
    buffer_answer = 0
    tmp_right = min_expo_over(self_fenwick_size)
    while (tmp_right >>= 1) > 0
      # まだ足せる場合
      if buffer_answer + tmp_right <= self_fenwick_size && (self[buffer_answer + tmp_right] ||= 0) < buffer_under_border
        buffer_under_border -= self[(buffer_answer += tmp_right)]
      end
    end
    buffer_answer + 1
  end

  # arg以上の2のべき乗
  def min_expo_over(arg)
    answer = 1
    # bit_lengthよりこっちの方が早い
    answer <<= 1 while answer <= arg
    answer
  end

  private :min_expo_over
end

fenwick = Array.new(N + 1, 0)
fenwick.unshift fenwick.size

# 転倒数
# https://atcoder.jp/contests/arc136/submissions/29760979
# 数字のみの生配列に直接includeして使う
module MyInversionNumber
  # https://scrapbox.io/pocala-kyopro/%E8%BB%A2%E5%80%92%E6%95%B0
  # https://kira000.hatenadiary.jp/entry/2019/02/23/053917
  include MyFenwickTree
  def my_inversion_number
    return 0 if size <= 1

    # 座標圧縮
    extend CoordinateCompression
    raw_array = coordinate_compression
    # raw_array = self

    fenwick = fenwick_initialize(raw_array.max)
    answer = 0
    raw_array.each_with_index do |value, index|
      # 現状の右合計 = 現状の全数-現状の左合計
      answer += index - fenwick.left_sum(value)
      fenwick.add(value, 1)
    end
    answer
  end

  def fenwick_initialize(arg_array_max)
    fenwick = Array.new(arg_array_max + 1, 0)
    fenwick[0] = arg_array_max
    fenwick.extend MyFenwickTree
  end

  # 座標圧縮
  module CoordinateCompression
    def coordinate_compression
      self_uniq = uniq
      self_uniq_hash = self_uniq.sort.zip((1..self_uniq.size).to_a).to_h

      map { |v| self_uniq_hash[v] }
      # [self_uniq.sort, (1..self_uniq.size).to_a].transpose.to_h
    end
  end
end
