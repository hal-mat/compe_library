# [-1, 0]をノード数分並べた二次元配列にincludeする
module WeightedUnionFind
  # from_weightとrelative_weightからto_weightを出す
  def write_weight_of_to_proc!(&arg_block)
    @weight_of_to_proc = arg_block
    @weight_of_to_proc.freeze
  end

  # (root_of_from, weight_of_from, weight_of_to, arg_relative_weight)から新しい[weight_of_to]
  def write_child_root_proc!(&arg_block)
    @child_root_proc = arg_block
    @child_root_proc.freeze
  end

  # fromとtoを「fromから見たtoの相対的重さ」として同じグループに統合する。
  def unite!(node_from, node_to, arg_relative_weight)
    root_of_from, weight_of_from = root_and_weight!(node_from)
    root_of_to, weight_of_to = root_and_weight!(node_to)

    return weight_of_to == @weight_of_to_proc.call(weight_of_from, arg_relative_weight) if root_of_from == root_of_to

    # ツリーサイズ小さい方を子にするような判定は無し。fromが親でtoが子
    self[root_of_from][0] -= tree_size(root_of_to)
    self[root_of_to] = [root_of_from, @child_root_proc.call(weight_of_from, weight_of_to, arg_relative_weight)]
    true
  end

  def same_union?(node_a, node_b)
    root_and_weight!(node_a)[0] == root_and_weight!(node_b)[0]
  end

  def tree_size(node)
    self[root_and_weight!(node)[0]][0] * -1
  end

  def root_and_weight!(arg_index)
    return [arg_index, self[arg_index][1]] if root?(arg_index)

    parent_index, weight_from_parent = self[arg_index]
    return [parent_index, self[arg_index][1]] if root?(parent_index)

    # ミュータブルオブジェクトなのでシャローコピーにならないよう注意
    answer =  root_and_weight!(parent_index).dup
    answer[1] += weight_from_parent
    self[arg_index] = answer
  end

  def root?(now_node)
    self[now_node][0] < 0
  end
end

NODES_COUNT, EDGES_COUNT = gets.split.map(&:to_i) # 配列から多重代入
wuf = Array.new(NODES_COUNT) { [-1, 0] }
wuf.extend WeightedUnionFind
wuf.write_weight_of_to_proc! { |weight_of_parent, relative_weight| weight_of_parent + relative_weight }
wuf.write_child_root_proc! do |weight_of_from, weight_of_to, arg_relative_weight|
  weight_of_from + arg_relative_weight - weight_of_to
end
