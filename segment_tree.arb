# 遅延セグ木ではなく通常セグ木。いつか遅延セグ木も書く
module SegmentTree
  # 根は[1]からスタート
  def init_segment_tree!(&arg_block)
    @parent_proc = arg_block.freeze
    @leaf_begin_index = 1 << size.bit_length.freeze
    @segment_tree = Array.new(@leaf_begin_index, 0).concat(self)
    update_all!
    # @segment_tree = Array.new(@leaf_begin_index << 1, 0)
  end

  def []=(leaf_index, value)
    super(leaf_index, value)
    child_index = @leaf_begin_index + leaf_index
    @segment_tree[child_index] = value
    until child_index == 1
      parent_index = parent_index_of(child_index)
      update!(parent_index)
      child_index = parent_index
    end
  end

  # op(a[l], ..., a[r - 1]) を返します。引数は半開区間です
  def prod(l, r)
    return 0 if l >= r

    answer = 0
    l += @leaf_begin_index
    r += @leaf_begin_index
    while l < r
      # 引数が偶数の場合は計算しなくても上行けば合計が記録済み
      # 引数が奇数の場合は上に行くと左の要素まで範囲に入ってしまうので、ここまでを記録してから一つ右側のペアに移動
      if l[0] == 1
        answer = @parent_proc.call(answer, @segment_tree[l])
        l += 1
      end
      # 引数が偶数の場合はどちらも記録せずに上行ってOK
      # 引数が奇数の場合はそのまま上に行くと左の要素が範囲から外れて消えてしまうので、左を記録してから上に移動
      answer = @parent_proc.call(answer, @segment_tree[r - 1]) if r[0] == 1
      l = parent_index_of(l)
      r = parent_index_of(r)
    end
    answer
  end

  def all_prod
    @segment_tree[1]
  end

  # 二分探索のmax_rightとmin_leftもいつか書く

  private

  # 全ての枝と根を更新
  def update_all!
    # 後ろから順に全てを足していく
    # self[0]がleafの最初のインデックス。最初に-1するのでbranchの最後のインデックスから巻き戻る
    parent_index_i = @leaf_begin_index
    while (parent_index_i -= 1) >= 1
      update!(parent_index_i)
    end
  end

  def update!(parent_index)
    # 左の子がない場合はそもそも両方とも子がないので親もnilでOK。右の子だけがnilはありえるので対策を入れる
    left_child_index = parent_index << 1
    return unless @segment_tree[left_child_index]

    right_child_index = left_child_index + 1
    @segment_tree[parent_index] = if @segment_tree[right_child_index]
                                    @parent_proc.call(@segment_tree[left_child_index], @segment_tree[right_child_index])
                                  else
                                    @segment_tree[left_child_index]
                                  end
  end

  def parent_index_of(child_index)
    child_index >> 1
  end
end

dp = Array.new(300_001, 0)
dp.extend SegmentTree
dp.init_segment_tree! { |a, b| a > b ? a : b }

# https://atcoder.jp/contests/abl/submissions/18547121

N, K = gets.chomp.split(' ').map(&:to_i)
INF = 10**6
class SegmentTree
  def initialize(size)
    @n = 1
    @n *= 2 while @n < size
    @node = Array.new(2 * @n, 0)
  end

  def update(index, val)
    i = index + @n - 1
    @node[i] = val
    while i > 0
      i = (i - 1) / 2
      l = @node[2 * i + 1]
      r = @node[2 * i + 2]
      @node[i] = l > r ? l : r
    end
    p @node
  end

  def get_max(left, right)
    ret = 0
    left += @n - 1
    right += @n - 1
    while left < right
      if left.even?
        ret = @node[left] if ret < @node[left]
        left += 1
      end
      if right.even?
        right -= 1
        ret = @node[right] if ret < @node[right]
      end
      left /= 2
      right /= 2
    end
    ret
  end
end
