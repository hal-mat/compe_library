module MyHeap
  # 空配列にいちいちheap_pushすると重いので、heap_pushが必要になってからsortして使う
  def heap_push!(arg)
    self << arg
    if (self_size = self.size) >= 2
      heap_up!(self_size - 1)
    end
  end

  def heap_shift!
    if self.size <= 2
      self.shift
    else
      shift_value = self[0]
      self[0] = self.pop
      heap_down! 0
      shift_value
    end
  end

  def heap_swap!(arg)
    self[0] = arg
    heap_down! 0
  end

  private

    # AtCoder Libraryのup,downと逆なので注意。下から持ち上げるのがup,頂上から下ろすのがdown
    def heap_up!(child_index)
      # 1-indexedなら2で割るだけで親インデックスが出るのだが、shiftがややこしくなりそうなのであえて0-indexedで行く
      parent_index = (child_index - 1) / 2
      # 値を交換した場合は今の親を子としてピラミッドを登っていく
      heap_up!(parent_index) unless swap_satisfied?(parent_index, child_index)
    end

    def heap_down!(parent_index)
      # 1-indexedなら2倍すれば左の子インデックスになるが、shiftがややこしいので0-indexed
      left_child_index = parent_index * 2 + 1
      right_child_index = left_child_index + 1

      must_parent_index = parent_index
      must_parent_index = left_child_index unless correct_order?(must_parent_index, left_child_index)
      must_parent_index = right_child_index unless correct_order?(must_parent_index, right_child_index)
      return if must_parent_index == parent_index

      self[must_parent_index], self[parent_index] = self[parent_index], self[must_parent_index]
      heap_down!(must_parent_index)
    end

    # こんなメソッド名だがbool判定だけではなく交換もメソッド内でやっちゃうので注意
    def swap_satisfied?(parent_index, child_index)
      # 子ノードが頂点
      # 最底辺でもうそれ以下の子ノードがない
      # 存在したとしても親子の順序が正しい
      # 以上３つのうちどれかを満たしているなら交換終了。それ以上は交換しない
      return true if correct_order?(parent_index, child_index)

      # 以上の条件を一つも満たさなかった場合、値を交換して継続
      self[parent_index], self[child_index] = self[child_index], self[parent_index]
      false
    end

    def correct_order?(parent_index, child_index)
      parent_value = self[parent_index]
      child_value = self[child_index]
      return true if child_value.nil? || child_index == 0 # 子ノードが存在しないかすでに頂点ならOK

      parent_value < child_value # コピペする時はここを変える
    end
end
