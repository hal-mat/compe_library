# ref:https://atcoder.jp/contests/abc306/submissions/42346841
module MyHeap
  # https://qiita.com/k-penguin-sato/items/7f98335ef631ea5ce7ad
  # 使えるかわからんので注意
  @correct_order_proc = nil
  def write_proc!(&arg_block)
    @correct_order_proc = arg_block
    @correct_order_proc.freeze
  end

  def heap_push!(arg_value)
    tmp_child_index = size
    # 昔はここからのせり上がりを再帰関数で書いていたが、rubyはwhileで書かないと間に合わない
    # 1-indexedなら2で割るだけで親インデックスが出るのだが、shiftがややこしくなりそうなのであえて0-indexed
    # https://atcoder.jp/contests/abc252/submissions/31865081
    # マジで一回ずつswapするのではなく、既存のピラミッドを一段ずつ引き下げて出来た隙間に引数の要素をねじ込む
    tmp_parent_index = (tmp_child_index - 1) >> 1
    # parent_index, parent_value = parent_index_and_value_of(child_index)
    while tmp_child_index > 0 && !@correct_order_proc.call(self[tmp_parent_index], arg_value)
      self[tmp_child_index] = self[tmp_parent_index]
      tmp_child_index = tmp_parent_index
      tmp_parent_index = (tmp_child_index - 1) >> 1
    end
    # それ以上上がれない場合は末尾の値を現在のchildの位置にねじ込んで終了
    self[tmp_child_index] = arg_value
  end

  def heap_shift!
    if size <= 2
      shift
    else
      shift_value = self[0]
      heap_swap!(pop)
      shift_value
    end
  end

  def heap_swap!(arg)
    self[0] = arg
    heap_down!
  end

  private

  # AtCoder Libraryのup,downと逆なので注意。下から持ち上げるのがup,頂上から下ろすのがdown
  def heap_down!
    first_value = self[0]
    tmp_parent_index = 0
    # must_parent_indexが親のindexのまま→正位置。終了
    # must_parent_indexに子のindexが再代入→転倒。子の値を親の位置に引き上げ、もう一段下で再比較

    until (tmp_strongest_index = strongest_index(first_value, tmp_parent_index)) == tmp_parent_index
      # 子の値を親の位置に引き上げ、もう一段下で再比較
      self[tmp_parent_index] = self[tmp_strongest_index]
      tmp_parent_index = tmp_strongest_index
    end
    # 終了したら頂上の値を今の親のindexに代入
    self[tmp_parent_index] = first_value
  end

  def strongest_index(new_first_value, tmp_parent_index)
    return tmp_parent_index if (left_child_index = (tmp_parent_index << 1) + 1) >= size

    stronger_child_index = left_child_index
    if (right_child_index = left_child_index + 1) < size &&
       @correct_order_proc.call(self[right_child_index], self[stronger_child_index])
      stronger_child_index = right_child_index
    end
    @correct_order_proc.call(new_first_value, self[stronger_child_index]) ? tmp_parent_index : stronger_child_index
  end
end
