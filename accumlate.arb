# 累積和
module Accumulate
  def accumulate(first_value = 0, &arg_block)
    buffer_answer = [first_value]
    buffer_answer.extend TermSum
    each do |v|
      buffer_answer << arg_block.call(buffer_answer[-1], v)
      # buffer_answer << buffer_answer[-1] + v
    end
    buffer_answer
  end

  def reverse_accumulate(&arg_block)
    buffer_answer = [0]
    reverse_each do |v|
      buffer_answer << arg_block.call(buffer_answer[-1], v)
      # buffer_answer << buffer_answer[-1] + v
    end
    buffer_answer.reverse
  end

  # 累積和では配列頭に0がついているので一つ右でちょうどいい.
  # 今のところ累積和でしか使えないので、いつかブロック引いてどんなモノイドでも使えるようにする
  module TermSum
    def term_sum(raw_index_left, raw_index_right)
      accum_index_left = raw_index_left
      accum_index_left = 0 if accum_index_left < 0
      accum_index_right = raw_index_right + 1
      (self[accum_index_right] || self[-1]) - self[accum_index_left]
    end
  end
end

class Array
  include Accumulate
end

# 二次元累積和
module TwoDimAccumulate
  def two_dim_accum
    tmp_answer = map(&:dup)
    2.times do
      tmp_answer.map! do |v|
        v.accumulate { |a, b| a + b }
      end
      tmp_answer = tmp_answer.transpose
    end
    tmp_answer.extend TermSum
  end

  # 二次元累積和の差
  module TermSum
    def term_sum(top_out_row_index, left_out_column_index, bottom_in_row_index, right_in_column_index)
      self[bottom_in_row_index][right_in_column_index] -
        self [bottom_in_row_index][left_out_column_index] -
        self[top_out_row_index][right_in_column_index] +
        self[top_out_row_index][left_out_column_index]
    end
  end
end
