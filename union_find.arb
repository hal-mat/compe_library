# node数分の-1で埋めた配列にextendする事。55行
module UnionFind
  def all_united?
    union_count == 1
  end

  def union_count
    # これを使うよりunite!の回数を数えた方が早い
    count { |v| v < 0 }
  end

  def unite!(root_tree_node, branch_tree_node)
    root_tree_root = root_of!(root_tree_node)
    branch_tree_root = root_of!(branch_tree_node)
    return false if root_tree_root == branch_tree_root

    # 大きい方が根
    if tree_size(root_tree_root) < tree_size(branch_tree_root)
      root_tree_root, branch_tree_root = branch_tree_root, root_tree_root
    end

    self[root_tree_root] += self[branch_tree_root]
    self[branch_tree_root] = root_tree_root
    true
  end

  def same_union?(node_a, node_b)
    root_of!(node_a) == root_of!(node_b)
  end

  def root_of!(now_node)
    # ガード節よりif elseの方がやや早いが、formatterが回って飼ってにガード節に
    return now_node if root?(now_node)

    # 再帰よりstackの方が早い
    stack = [now_node]
    parent_node = self[now_node]
    until root?(parent_node)
      stack << parent_node
      parent_node = self[parent_node]
    end
    stack.each { |v| self[v] = parent_node }
    parent_node
  end

  def tree_size(node)
    self[root_of!(node)] * -1
  end

  def root?(now_node)
    # 正負判定は、i > 0・i < 0が速い。i.positive?・i.negative?より、1.4倍速い。
    self[now_node] < 0
    # 昔は空配列もOKだったが、重いので-1埋めのみにした
    # (self[now_node] ||= -1).negative?
  end
end

# 短縮版
# ref:https://twitter.com/0x3b800001/status/1591432107905409024
class DSU < Hash
  def merge(i, j)
    x = self[i] ||= [i].to_set
    y = self[j] ||= [j].to_set
    return false if x == y

    x, y = y, x if x.size < y.size
    # eachは罠？　実用前に確認
    y.each do |v|
      self[v] = x << v
    end
    true
  end
end

# 最小全域木
module Kruskal
  # [node_a, node_b, cost]を並べた二次元配列
  def kruskal
    transposed = transpose
    transposed.pop
    all_nodes = transposed.flatten
    min_node, max_node = all_nodes.minmax
    nodes_count = max_node - min_node + 1
    uf = Array.new(nodes_count, -1)
    uf.extend UnionFind
    sorted_self = sort_by(&:last)
    min_tree = []
    sorted_self.each do |v|
      break if min_tree.size == nodes_count - 1

      node_a = v[0] - min_node
      node_b = v[1] - min_node
      next if uf.same_union?(node_a, node_b)

      min_tree << v
      uf.unite!(node_a, node_b)
    end
    min_tree
  end
end

# ランダム木作成
NODES_COUNT = gets.to_i
uf = Array.new(NODES_COUNT, -1)
uf.extend UnionFind
tree = []
NODES_COUNT.times do |left_i|
  next if left_i == 0

  right = left_i
  right = rand(0..NODES_COUNT - 1) while uf.same_union?(left_i, right)
  tree << "#{left_i} #{right}"
  uf.unite!(left_i, right)
end
puts tree
