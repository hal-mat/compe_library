module UnionFind
  def has_all_united
    union_count == 1
  end

  def union_count
    self.count {|v| v && v.negative? }
  end

  def unite(root_tree_node, branch_tree_node)
    root_tree_root = root_of(root_tree_node)
    branch_tree_root = root_of(branch_tree_node)
    return if root_tree_root == branch_tree_root

    # 前後がない場合はソートして小さい木を葉にした方が早い。todo:いつかsize関数作って比較して交換する関数作る
    self[root_tree_root] += self[branch_tree_root]
    self[branch_tree_root] = root_tree_root
  end

  def same_union?(node_a, node_b)
    root_of(node_a) == root_of(node_b)
  end

  def root_of(now_node)
    return now_node if root?(now_node)

    self[now_node] = root_of(self[now_node])
  end

  private

    def root?(now_node)
      self[now_node].negative?
    end
end
