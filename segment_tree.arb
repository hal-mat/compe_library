# 106行。moduleにしてarrayに差すとなぜか遅い。メソッド数の多いクラスほど重いのか?
class SegmentTree
  attr_reader :segment_tree, :raw_array

  # 根は[1]からスタート
  def initialize(size, element)
    @size = size
    @size.freeze
    # 単位元。合計の初期値など
    @element = element
    @element.freeze
    @raw_array = Array.new(@size, @element)
    @leaf_begin_index = 1 << @size.bit_length
    @leaf_begin_index.freeze
    @segment_tree = Array.new(@leaf_begin_index | @size, @element)
  end

  def all_prod
    @segment_tree[1]
  end

  # op(a[l], ..., a[r - 1]) を返します。引数は半開区間です
  def prod(arg_l, arg_r)
    return all_prod if arg_l == 0 && arg_r == @size
    raise StandardError, 'not sorted' if arg_l > arg_r
    return @raw_array[arg_l] if arg_l == arg_r

    # prod_bottom_up(arg_l | @leaf_begin_index, arg_r | @leaf_begin_index)
    prod_top_down(arg_l | @leaf_begin_index, (arg_r + 1) | @leaf_begin_index, @leaf_begin_index,
                  (@leaf_begin_index << 1))
  end

  def []=(leaf_index, value)
    raise StandardError, 'too large index' if leaf_index >= @size

    @raw_array[leaf_index] = value
    tmp_seg_index = @leaf_begin_index | leaf_index
    @segment_tree[tmp_seg_index] = value
    tmp_seg_index >>= 1
    tmp_seg_index >>= 1 while tmp_seg_index >= 1 && update!(tmp_seg_index)
  end

  # 二分探索のmax_rightとmin_leftもいつか書く

  private

  def update!(parent_index)
    raise StandardError, 'too large parent index' if parent_index >= @leaf_begin_index

    left_child_index = parent_index << 1
    left_child_value = @segment_tree[left_child_index] || @element
    right_child_value = @segment_tree[(left_child_index | 1)] || @element
    new_parent_value = parent_value(left_child_value, right_child_value)
    return false if @segment_tree[parent_index] == new_parent_value

    @segment_tree[parent_index] = new_parent_value
    true
  end

  # 再帰なのに、なぜか早い
  def prod_top_down(seg_l, seg_r, tmp_seg_l, tmp_seg_r)
    if seg_r <= tmp_seg_l || tmp_seg_r <= seg_l
      @element
    elsif seg_l <= tmp_seg_l && tmp_seg_r <= seg_r
      # 先に@segment_tree[tmp_seg_l >> (tmp_seg_l ^ (tmp_seg_r - 1)).bit_length]を算出して
      # elementと同じならそこでelementを返す仕組みも一度試した
      # かえって遅くなるので削除
      @segment_tree[tmp_seg_l >> (tmp_seg_l ^ (tmp_seg_r - 1)).bit_length]
    else
      # lとrの間。mid
      tmp_seg_m = ((tmp_seg_l + tmp_seg_r) >> 1)
      parent_value(prod_top_down(seg_l, seg_r, tmp_seg_l, tmp_seg_m),
                   prod_top_down(seg_l, seg_r, tmp_seg_m, tmp_seg_r))
    end
  end

  # aclはこちらなのだが、なぜか遅い。
  def prod_bottom_up(seg_l, seg_r)
    answer = @element
    tmp_l = seg_l
    tmp_r = seg_r
    until tmp_l == tmp_r || answer == all_prod
      # 引数が偶数の場合は計算しなくても上行けば合計が記録済み
      # 引数が奇数の場合は上に行くと左隣の要素まで範囲に入ってしまうので、ここまでを記録してから一つ右側に移動して上に
      answer = parent_value(answer, @segment_tree[tmp_l]) if tmp_l[0] == 1
      # lが奇数の場合は一個右に詰めてから上に登る。偶数なら右に移動する必要はないが、どの道登る先は同じ
      tmp_l  = (tmp_l + 1) >> 1
      # 引数が偶数の場合はどちらも記録せずに上行ってOK
      # 引数が奇数の場合はそのまま上に行くと現在右端の要素が範囲から外れて消えてしまうので、現在右端を記録してから上に移動
      answer = parent_value(answer, @segment_tree[tmp_r ^ 1]) if tmp_r[0] == 1
      tmp_r >>= 1
    end
    answer
  end

  def parent_value(_a_child_value, _b_child_value)
    raise StandardError, 'no function'
  end
end

# monkey patch
class SegmentTree
  def parent_value(a_child_value, b_child_value) # rubocop:disable Lint/DuplicateMethods
    (a_child_value > b_child_value) ? a_child_value : b_child_value
  end
end

dp = SegmentTree.new(INPUT_MAX + 1, 0)

# https://atcoder.jp/contests/abl/submissions/18547121

N, K = gets.chomp.split(' ').map(&:to_i)
INF = 10**6
class SegmentTree
  def initialize(size)
    @n = 1
    @n *= 2 while @n < size
    @node = Array.new(2 * @n, 0)
  end

  def update(index, val)
    i = index + @n - 1
    @node[i] = val
    while i > 0
      i = (i - 1) / 2
      l = @node[(2 * i) + 1]
      r = @node[(2 * i) + 2]
      @node[i] = (l > r) ? l : r
    end
    p @node
  end

  def get_max(left, right)
    ret = 0
    left += @n - 1
    right += @n - 1
    while left < right
      if left.even?
        ret = @node[left] if ret < @node[left]
        left += 1
      end
      if right.even?
        right -= 1
        ret = @node[right] if ret < @node[right]
      end
      left /= 2
      right /= 2
    end
    ret
  end
end
